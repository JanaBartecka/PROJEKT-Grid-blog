/* nejsme vcerejsi, pouzivame moderni box model */
html { box-sizing: border-box; }
*, :after, :before { box-sizing: inherit; }


body {
	margin: 0;
	padding: 30px;
	font-family:  'Alice', serif;
	font-size: 18px;
	line-height: 1.5;
}

h1, h2, h3 {
	font-family: 'Kaushan Script', cursive;
	font-weight: normal;
	margin: 0;
}

blockquote {
	font-family: 'Kaushan Script', cursive;
}

/* --------------------------------------------------- */

/* barvy */
:root {
	--svetla: #edf3f5;
	--seda: #b2bec3;
	--tmava: #636e72;
	--oranzova: #ee5a24;
	--cervena: #ea2027;
	--zluta: #f79f1f;
	--zelena: #a3cb38;
	--limetka: #c4e538;
}

/*
	Všimni si, jak jsou zde nadefinované barvy.
	Potřebný kód barvy si odtamtud můžeš vyzobnout a použít
	ve svém kódu, ale existuje i lepší způsob.

  CSS custom properties, někdy také označované jako CSS
	variables (CSS proměnné), je způsob, jak si	pojmenovat
	nějakou hodnotu a potom ji v kódu opakovaně používat.
	Často se používá právě pro barvy a další "nastavení".

	Když si chci nějakou hodnotu nadefinovat, použiji zápis
	--mujnazev: hodnota
	Když chci, abych mohl hodnotu používat všude v CSS,
	založím ji uvnitř selektoru :root, takže např.:
	:root {
		--mojebarva: #ff8800;
	}

	Chci-li potom dál v CSS hodnotu použít, stačí použít funkci var a v závorce název proměnné.Např.:
	.odstavec {
		color: var(--mojebarva);
	}

	Nemusím si tak pamatovat kódy barev nebo neustále v CSS jezdit nahoru a dolů, abych si je odněkud zkopíroval.

	Více o CSS custom properties:
	- https://www.w3schools.com/css/css3_variables.asp
	- https://css-tricks.com/patterns-for-practical-css-custom-properties-use/
	- https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/
*/

h1, h2 {
	color: var(--zelena);
}

h1 {
	font-size: 72px;
	padding-bottom: 36px;
}

h2 {
	margin: 0;
	padding: 20px 0 15px 0;
	font-size: 36px;
}

.meta {
	color: var(--seda);
	font-size: 14px;
}

.blog {
	display: grid;
	grid-template-columns: 1fr 4fr 2fr;
	column-gap: 40px;
}

p ,
header,
h2,
footer {
	grid-column:2/3;
}

p {
	margin: 0 0 25px 0;
}


figure {
	grid-column: 1/-1;
	padding-bottom: 40px auto 40px auto ;
	margin:20px 0 60px 0 ;
}

figure img {
	width: 100%;
	height: 100%;
	object-fit: cover;
}

.tip-vlevo {
	grid-column: 1/2;
	/* grid-row: 3/4; */
	border-right: 4px solid var(--zluta);
	text-align: right;
	align-self: flex-start;
}

.tip-vpravo {
	grid-column: -1/-2;
	/* grid-row: 7/8; */
	border-left: 4px solid var(--zluta);
	text-align: left;
	align-self: flex-start;
}

.tip img {
	width: calc(100% - 20px);
	/* height: calc(100% - 20px); */
	/* object-fit: cover; */
}

.tip {
	background-color: var(--svetla);	
	padding: 10px;	
	margin: 0;
}

.tip a {
	color: var(--cervena);
}

figcaption {
	color: var(--seda);
	font-size: 14px;
}

blockquote::before {
	background-color: var(--limetka);
	left: 50%;
	content: '';
	display: block;
	height: 3px;
	top: 0;
	position: absolute;
	transform: translate(-50%,0);
    width: 100px;

}

blockquote {
	grid-column: 1/-1;
	padding: 10px;
	text-align: center;
	font-size: 36px;
	color: var(--seda);
	position: relative;
}

blockquote::after {
	background-color: var(--limetka);
	left: 50%;
	content: '';
	display: block;
	height: 3px;
	bottom: 0;
	position: absolute;
	transform: translate(-50%,0);
    width: 100px;

}

footer,
footer a {
	color: var(--seda);
	font-size: 16px;
}

@media screen and (max-width:1000px) {
	.blog {
		column-gap: 1px;
		grid-template-columns: 2fr 4fr 2fr;
	}

	p ,
	header,
	h2,
	footer {
		grid-column:1/-1;
	}

	.potipuvlevo {
		grid-column:2/-1;
		padding-left: 20px;
	}

	.potipuvpravo {
		grid-column:1/-2;
		padding-right: 20px;
	}

}

@media screen and (max-width:600px) {

	.potipuvlevo,
	.potipuvpravo {
		grid-column:1/-1;
		padding-left: 0;
	}

	.tip {
		border-top: 2px solid var(--zluta);
		border-bottom: 2px solid var(--zluta);
		border-right: 0;
		border-left: 0;
		grid-column: 1/-1;
		text-align: center;
		margin-bottom: 30px;
	}

	.tip p {
		margin: 0;
	}

	.tip img {
		width: 50%;
		height: 50%;
		object-fit: cover;
		vertical-align: bottom;
	}

	.tipsobrazkem {
		display: flex;
		margin-bottom: 20px;
		align-items: flex-start;
		align-content: center;
		gap: 10px;
	}

	.text {
		align-self: center;
		text-align: left;
		align-self: center;
	}

	.text,
	.obrazek {
		flex: 0 0 50%;
	}

}

